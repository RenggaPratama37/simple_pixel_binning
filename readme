Simple Pixel Binning Image Upscaling Library
Project Overview

The Simple Pixel Binning Image Upscaling Library is a Java-based project that uses native C code through Java Native Interface (JNI) to perform image upscaling. The library offers several image processing techniques, including pixel binning, Gaussian blur, smoothing, sharpening, and denoising. It is designed for high-performance image processing in Java or Android applications.
Directory Structure

The project is organized into the following directories and files:

graphql

simple_pixel-binning/
│
├── include/
│   ├── denoising.h            # Header file for denoising function declarations
│   ├── gaussian_blur.h        # Header file for Gaussian blur function declarations
│   ├── pixel_binning.h        # Header file for pixel binning function declarations
│   ├── pixel_binning_jni.h    # Header file for JNI bridge declarations
│   ├── smoothing.h            # Header file for smoothing function declarations
│   ├── unsharp_masking.h      # Header file for unsharp masking function declarations
│
├── main/
│   ├── denoising.c            # C file implementing denoising
│   ├── gaussian_blur.c        # C file implementing Gaussian blur
│   ├── pixel_binning_jni.c    # C file implementing JNI bridge functions
│   ├── pixel_binning_twice.c  # C file implementing pixel binning with fixed 2x2 scaling
│   ├── pixel_binning_quatro.c # C file implementing pixel binning with fixed 4x4 scaling
│   ├── smoothing.c            # C file implementing smoothing
│   └── unsharp_masking.c      # C file implementing unsharp masking
│
├── libpixel_binning.so        # Compiled native library (.so file)
├── Makefile                   # Makefile to compile the native C/C++ code into a shared library
└── project/
    ├── PixelBinning.java      # Java class to interface with native methods via JNI
    └── ImageExample.java      # Example Java program for upscaling images

Key Components
1. Pixel Binning Algorithm (pixel_binning_twice.c and pixel_binning_quatro.c)

These modules implement pixel binning algorithms to upscale images. Pixel binning involves combining several pixels into one to reduce noise and improve image quality.

    pixel_binning_twice.c: Implements pixel binning with a fixed 2x2 scale.
        Function: pixel_binning_twice(unsigned char* image, int width, int height, unsigned char* output)
        Purpose: Upscales the image by a factor of 2x2.

    pixel_binning_quatro.c: Implements pixel binning with a fixed 4x4 scale.
        Function: pixel_binning_quatro(unsigned char* image, int width, int height, unsigned char* output)
        Purpose: Upscales the image by a factor of 4x4.

2. Gaussian Blur (gaussian_blur.c)

Applies Gaussian blur to the image to reduce noise and soften details.

    Function: apply_gaussian_blur(unsigned char* image, int width, int height, unsigned char* output)
    Purpose: Smoothens the image by applying a Gaussian blur filter.

3. Smoothing (smoothing.c)

Smoothens color transitions between pixels to make the image appear more polished.

    Function: apply_smoothing(unsigned char* image, int width, int height, unsigned char* output)
    Purpose: Applies a smoothing filter to improve pixel transitions.

4. Sharpening (unsharp_masking.c)

Enhances image sharpness and clarifies details using unsharp masking.

    Function: apply_unsharp_masking(unsigned char* image, int width, int height, unsigned char* output)
    Purpose: Sharpens the image and enhances edges.

5. Denoising (denoising.c)

Reduces noise in the image using a denoising filter.

    Function: apply_denoising(unsigned char* image, int width, int height, unsigned char* output)
    Purpose: Removes noise and smoothens the image.

6. JNI Integration (pixel_binning_jni.c)

Provides JNI bridge functions to interface Java with native C code.

    Function: Java_PixelBinning_upscale2x2(...)
    Purpose: Allows Java to call native methods for image processing.

7. Java Class (PixelBinning.java)

Java class for interacting with the native library and performing image upscaling.

java

public class PixelBinning {
    static {
        System.loadLibrary("pixel_binning");
    }

    public native void upscale2x2(int[] inputImage, int width, int height, int[] outputImage);
}

8. Example Program (ImageExample.java)

Demonstrates how to use the PixelBinning class to read, process, and save images.
Build and Usage Instructions
1. Compiling the Native Library

Use the provided Makefile to compile the C/C++ code into a shared library (libpixel_binning.so).

bash

make

2. Compiling the Java Code

Compile the Java files with:

bash

javac project/PixelBinning.java project/ImageExample.java

3. Running the Java Program

Run the example program with:

bash

java -Djava.library.path=. project.ImageExample

Ensure the shared library (libpixel_binning.so) is in the same directory or update the -Djava.library.path to point to the correct location.
4. Using the Library in Your Own Project

To integrate the pixel binning functionality into your own project:

    Include the PixelBinning.java file in your project.
    Ensure libpixel_binning.so is in the runtime library path.
    Use the PixelBinning class to process images.

Example usage:

java

PixelBinning pb = new PixelBinning();
int[] inputImage = { /* your image data */ };
int[] outputImage = new int[scaledWidth * scaledHeight];
pb.upscale2x2(inputImage, originalWidth, originalHeight, outputImage);

Modifications and Customization
Upscaling with Different Scale Factors

You can adjust the pixel_binning_twice.c and pixel_binning_quatro.c for different scaling factors as needed.
License

This project is open-source under the MIT License.
Future Enhancements

    Support for additional interpolation algorithms (e.g., bilinear, bicubic).
    GPU acceleration for faster processing.
    Extended JNI interface for advanced image processing features.